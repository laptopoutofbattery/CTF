https://infosecwriteups.com/rsa-attacks-common-modulus-7bdb34f331a5

import gmpy2
from Crypto.Util.number import long_to_bytes

def egcd(a, b):
    if (a == 0):
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

#replace values
n = 83975906068913096087588073656733813065150079680554091274063943640137411203738048898825466090943807255988544566860854049474947301645295520091854742379750568618644135348427288756118592198065499745363223121777693215626431459443581274310405329745053221664430446590615799136315320601602466127908893663288510786647
c1 = 31659303751736868834891607684257048871936469115435374460897544640358688152143391231335725802483652002853857871125668245943760603394728761252879976388024157769458566058146911391377980917754982293857492895084583497754242013075227091249894251994577599565876140586352080527122583984057527835456792107351001273371
c2 = 80631255872849483189681834513333445504508097366732545088786719985243190012498962492861373574228032385521237268594175662345687123627071227685335548200658623222458056857018655759372284555883617659475594683515229574674885138866511603279561476518226015503565930696987458835787372259198845197968475724855675819806
e1 = 32
e2 = 94

g, u, v = egcd(e1, e2)

if u < 0:
    c1 = int(gmpy2.invert(c1, n))
    c1 = pow(c1, (-1)*u, n)
else:
    c1 = pow(c1, u, n)
    
if v < 0:
    c2 = int(gmpy2.invert(c2, n))
    c2 = pow(c2, (-1)*v, n)
else:
    c2 = pow(c2, v, n)
    
m = c1*c2%n
m = int(gmpy2.iroot(m, g)[0])
msg = long_to_bytes(m)
print(msg)
