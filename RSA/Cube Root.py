from Crypto.PublicKey import RSA
from Crypto.Util import asn1
#from Crypto.Util.number import *
from Crypto.Util.number import long_to_bytes
from Crypto.Util.number import bytes_to_long
from base64 import b64decode
import binascii
import gmpy2

#f = open("flag.txt.encrypted", "rb")
#ct = f.read()
#c = bytes_to_long(ct)

#print(bytes_to_long(f.read()))


n=29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673
e=3

c=2205316413931134031074603746928247799030155221252519872650073010782049179856976080512716237308882294226369300412719995904064931819531456392957957122459640736424089744772221933500860936331459280832211445548332429338572369823704784625368933

#n = int(N,16)
#e = int(e,16)
#c = int(c,16)
#print("n=",n)
#print("e=",e)
#print("c=",c)

# Cube root attack
# Calculating e-th root of ciphertext
pt = gmpy2.iroot(c,e)[0]
print(gmpy2.iroot(8,3)[1])
print("Flag is : " + str(long_to_bytes(pt).decode()))

#n = 109519949594351789954104337472181854292469782647924468006955110804513273413801426079773287028099224546023502433597144153076619710337459077951311060560629437088501731598551250070991043031528877493358619132244091116833508719546188819427310015240108844956689216739426410222068217870145463714133800752505201440667
#e = 3
#c = 2037967485353854315910316844544334715884704061242744116599915588960647243120371964074468789445464411615352548620026910654036910068906623926717387627172681623206323818942694365646759205137546203748202503171157255670136397120977815486902268442670353393632413029

for k in range(1000000):
    potential_pt, is_cube = gmpy2.iroot(c + (k * n), e)
    if is_cube:
        print(long_to_bytes(potential_pt))
        print(k)

#cube root attack
for k in range(1000000):
  if gmpy2.iroot(c + (k * n), e)[1]:
      print(long_to_bytes(gmpy2.iroot(c + (k * n), e)[0]))